plugins {
	id 'scala'
	id 'maven-publish'
	id 'fabric-loom' version '1.7-SNAPSHOT'
}

group = project.maven_group
version = mod_version + "+scala." + project.scala_version + (System.getenv('GITHUB_ACTIONS') ? "" : ".local")

def ENV = System.getenv()

base {
	archivesName = project.archives_base_name
}

loom {
	mods {
		"fabric-language-scala" {
			sourceSet sourceSets.main
		}
	}
}

configurations {
	includeAndExpose

	modApi {
		extendsFrom includeAndExpose
	}
	include {
		extendsFrom includeAndExpose
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Scala Dependencies
	includeAndExpose "org.scala-lang:scala3-library_3:${project.scala_version}"
	// Dependent by Scala3
	includeAndExpose "org.scala-lang:scala-library:2.13.14"

	testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}


tasks.withType(ScalaCompile).configureEach {
	scalaCompileOptions.additionalParameters = ["-new-syntax", "-release:21"]
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}
import net.fabricmc.loom.util.gradle.SourceSetHelper
//test {
//	useJUnitPlatform()
//
////	afterEvaluate {
////		// See: https://github.com/FabricMC/fabric-loader/pull/585
////		def classPathGroups = loom.mods.stream()
////				.map { modSettings ->
////					SourceSetHelper.getClasspath(modSettings, getProject()).stream()
////							.map(File.&getAbsolutePath)
////							.collect(Collectors.joining(File.pathSeparator))
////				}
////				.collect(Collectors.joining(File.pathSeparator+File.pathSeparator))
////
////		systemProperty("fabric.classPathGroups", classPathGroups)
////	}
//}


publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = project.group
			artifactId = project.name.toLowerCase()
			version = project.version

			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_URL) {
			println("Publish to Maven...")
			maven {
				name "GitHubPackages"
				url ENV.MAVEN_URL
				credentials {
					username ENV.GITHUB_ACTOR
					password ENV.GITHUB_TOKEN
				}
			}
		} else {
			println("actor: ${ENV.GITHUB_ACTOR}")
			println("No maven config found")
		}
	}
}

// A task to ensure that the version being released has not already been released.
import groovy.xml.XmlSlurper

import java.util.stream.Collectors

tasks.register('checkVersion') {
	doFirst {
		var xml = URI.create("https://maven.fabricmc.net/net/fabricmc/fabric-language-scala/maven-metadata.xml").toURL().text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text()
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}
